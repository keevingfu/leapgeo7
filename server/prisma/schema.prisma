// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// User Management & RBAC
// ============================================

enum Role {
  ADMIN
  EDITOR
  ANALYST
  VIEWER
}

enum Status {
  ACTIVE
  INACTIVE
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      Role     @default(VIEWER)
  status    Status   @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, status])
  @@index([email])
}

// ============================================
// Roadmap & Prompt Management
// ============================================

enum PLevel {
  P0 // Core: Must implement
  P1 // Important: High priority
  P2 // Opportunity: Medium priority
  P3 // Reserve: Low priority
}

model Roadmap {
  id                 String    @id @default(uuid())
  month              String    // e.g., "2025-01", "2025-02"
  prompt             String    @db.Text
  pLevel             PLevel
  enhancedGeoScore   Float     @default(0)
  quickWinIndex      Float     @default(0)
  searchVolume       Int       @default(0)
  competition        Float     @default(0)
  trendingStatus     String    @default("stable") // stable, rising, falling
  estimatedTraffic   Int       @default(0)
  difficulty         Float     @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  citations          Citation[]
  contents           Content[]

  @@index([pLevel, month])
  @@index([enhancedGeoScore(sort: Desc)])
  @@index([quickWinIndex(sort: Desc)])
  @@index([month, pLevel])
}

// ============================================
// Content Generation & Distribution
// ============================================

enum Channel {
  YOUTUBE
  REDDIT
  QUORA
  MEDIUM
  BLOG
  AMAZON
  LINKEDIN
}

enum PublishStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model Content {
  id             String        @id @default(cuid())
  title          String        @db.Text
  channel        Channel
  publishStatus  PublishStatus @default(DRAFT)
  publishDate    DateTime?
  contentUrl     String?
  coveredPrompts String[]      // Array of prompt keywords

  // KPI Metrics
  kpiCtr         Float?        // Click-through rate
  kpiViews       Int?          // Total views
  kpiGmv         Float?        // Gross merchandise value (for e-commerce)
  kpiEngagement  Float?        // Engagement rate
  kpiConversion  Float?        // Conversion rate

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  roadmapId      String?
  roadmap        Roadmap?      @relation(fields: [roadmapId], references: [id], onDelete: SetNull)
  citations      Citation[]

  @@index([channel, publishStatus])
  @@index([publishDate(sort: Desc)])
  @@index([roadmapId])
}

// ============================================
// Citation Tracking & GEO Monitoring
// ============================================

enum CitationStrength {
  DIRECT     // ⭐⭐⭐ Direct citation with product mention
  REFERENCED // ⭐⭐ Referenced in context
  MENTIONED  // ⭐ Brief mention
}

model Citation {
  id               String           @id @default(uuid())
  citationUrl      String           @db.Text
  platform         Channel
  citationStrength CitationStrength
  aiIndexed        Boolean          @default(false) // Whether indexed by AI models
  detectedAt       DateTime         @default(now())
  lastChecked      DateTime         @default(now())
  isActive         Boolean          @default(true) // Whether citation is still live

  // Metrics
  citationContext  String?          @db.Text // Surrounding text context
  sentiment        Float?           // Sentiment score (-1 to 1)
  visibility       Float?           // Visibility score (0 to 100)

  roadmapId        String?
  roadmap          Roadmap?         @relation(fields: [roadmapId], references: [id], onDelete: SetNull)

  contentId        String?
  content          Content?         @relation(fields: [contentId], references: [id], onDelete: SetNull)

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([platform, citationStrength])
  @@index([aiIndexed, isActive])
  @@index([detectedAt(sort: Desc)])
  @@index([roadmapId])
  @@index([contentId])
}

// ============================================
// Analytics & Feedback
// ============================================

model Feedback {
  id            String   @id @default(uuid())
  source        String   // e.g., "YouTube Comments", "Reddit Thread"
  sourceUrl     String?  @db.Text
  sentiment     String   // positive, neutral, negative
  category      String   // feature_request, bug_report, general, etc.
  content       String   @db.Text
  upvotes       Int      @default(0)
  processed     Boolean  @default(false)
  actionTaken   String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sentiment, processed])
  @@index([createdAt(sort: Desc)])
  @@index([category])
}

// ============================================
// Workflow & Task Management
// ============================================

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

model WorkflowTask {
  id          String     @id @default(uuid())
  title       String
  description String?    @db.Text
  taskType    String     // content_creation, citation_tracking, analysis, etc.
  status      TaskStatus @default(PENDING)
  priority    PLevel     @default(P2)
  assignedTo  String?    // User ID or team name
  dueDate     DateTime?
  completedAt DateTime?
  metadata    Json?      // Flexible field for task-specific data
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, priority])
  @@index([dueDate(sort: Asc)])
  @@index([assignedTo])
}

// ============================================
// System Configuration
// ============================================

model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique // e.g., "geo_check_interval", "max_citations_per_day"
  value     String   @db.Text // JSON string for complex values
  category  String   // general, api, workflow, notification
  updatedBy String?  // User ID who last updated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([key])
}
